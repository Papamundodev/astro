---
// YouTube API configuration
const YOUTUBE_API_KEY = import.meta.env.YOUTUBE_API_KEY;
const SYNTAX_PLAYLIST_ID = import.meta.env.YOUTUBE_SYNTAX_PLAYLIST_ID || '';
const SHOPTALKSHOW_CHANNEL_ID = import.meta.env.YOUTUBE_SHOPTALKSHOW_CHANNEL_ID || '';
const KEVIN_POWELL_CHANNEL_ID = import.meta.env.YOUTUBE_KEVIN_POWELL_CHANNEL_ID || '';

// Function to fetch YouTube videos from a specific channel's playlist
async function getYouTubeVideosFromPlaylist(playlistId = '') {
  try {
    const response = await fetch(
      `https://youtube.googleapis.com/youtube/v3/playlistItems?` +
      `part=snippet&` +
      `playlistId=${playlistId}&` +
      `maxResults=10&` +
      `key=${YOUTUBE_API_KEY}`,
      {
        headers: {
          'Accept': 'application/json',
        }
      }
    );

    const data = await response.json();
    const filteredVideos = (data.items || []).filter((video: any) => 
        video.snippet.title !== 'Private video'
        );
    return filteredVideos || [];
  } catch (error) {
    console.error('Error fetching YouTube videos:', error);
    return [];
  }
}

async function getYouTubeVideosFromChannel(channelId = '') {
  try {
    const response = await fetch(
      `https://youtube.googleapis.com/youtube/v3/search?` +
      `part=snippet&` +
      `channelId=${channelId}&` +
      `maxResults=10&` +
      `key=${YOUTUBE_API_KEY}`,
      {
        headers: {
          'Accept': 'application/json',
        }
      }
    );

    const data = await response.json();
    const filteredVideos = (data.items || []).filter((video: any) => 
        video.snippet.title !== 'Private video'
        );
    return filteredVideos || [];
  } catch (error) {
    console.error('Error fetching YouTube videos:', error);
    return [];
  }
}

// Fetch all YouTube videos at build time
const [syntaxVideos, shoptalkshowVideos, kevinPowellVideos] = await Promise.all([
  getYouTubeVideosFromPlaylist(SYNTAX_PLAYLIST_ID),
  getYouTubeVideosFromChannel(SHOPTALKSHOW_CHANNEL_ID),
  getYouTubeVideosFromChannel(KEVIN_POWELL_CHANNEL_ID)
]);

// const videos = [...syntaxVideos, ...shoptalkshowVideos, ...kevinPowellVideos].sort((a, b) => 
//   new Date(b.snippet.publishedAt).getTime() - new Date(a.snippet.publishedAt).getTime()
// ).slice(0, 9);
// YouTube component to display videos passed as props
const { videos = [] } = Astro.props;

---

<div class="youtube-videos">
  <h2>Latest Syntax Videos</h2>
  {videos.length > 0 ? (
    <div class="video-grid">
      {videos.map((video: any) => (
        <div class="video-card">
          <a href={`https://www.youtube.com/watch?v=${video.snippet?.resourceId?.videoId || video.id?.videoId}`} target="_blank" rel="noopener noreferrer">
            <img 
              src={video.snippet.thumbnails?.medium?.url || video.snippet.thumbnails?.default?.url || '/placeholder.jpg'} 
              alt={video.snippet.title}
              class="video-thumbnail"
            />
            <h3 class="video-title">{video.snippet.title}</h3>
            <p class="video-description">{video.snippet.description.substring(0, 150)}...</p>
            <p class="video-channel">by {video.snippet.channelTitle}</p>
            <p class="video-date">{new Date(video.snippet.publishedAt).toLocaleDateString()}</p>
          </a>
        </div>
      ))}
    </div>
  ) : (
    <p>No videos found. Please check your YouTube API key.</p>
  )}
</div>

<style>
  .youtube-videos {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .video-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-top: 1rem;
  }

  .video-card {
    border: 1px solid #e1e5e9;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .video-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .video-card a {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .video-thumbnail {
    width: 100%;
    height: 180px;
    object-fit: cover;
  }

  .video-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0.75rem 1rem 0.5rem;
    line-height: 1.3;
    color: #1a1a1a;
  }

  .video-description {
    font-size: 0.9rem;
    color: #666;
    margin: 0 1rem 0.5rem;
    line-height: 1.4;
  }

  .video-channel {
    font-size: 0.85rem;
    color: #888; 
    margin: 0 1rem 0.25rem;
    font-weight: 500;
  }

  .video-date {
    font-size: 0.8rem;
    color: #aaa;
    margin: 0 1rem 1rem;
  }
</style>
